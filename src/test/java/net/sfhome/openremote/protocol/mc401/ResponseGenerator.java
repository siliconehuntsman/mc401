/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.sfhome.openremote.protocol.mc401.TestUtils;

import com.google.gwt.regexp.shared.RegExp;
//import org.gwtproject.regexp.shared.RegExp;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.*;

import java.lang.Exception;
import java.util.AbstractMap.SimpleEntry;
import java.util.Collections;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.*;
import java.util.stream.*;
import java.util.stream.Collectors.*;


//import org.junit.Test;
//port org.junit.BeforeEach;

//import static org.junit.Assert.*;


import net.sfhome.openremote.protocol.mc401.*;

import org.openremote.model.attribute.AttributeRef;
import org.openremote.model.attribute.AttributeState;
import org.openremote.model.value.*;

public class ResponseGenerator {
    ArrayList<SimpleEntry<Integer, String>> responseDb = new ArrayList<>();;
    SimpleEntry<Integer, String> lastResponse;
    ScoreBoard scoreBoard;
    Random fieldGen = new Random();
    Random reqGen = new Random();

    Boolean justFirstResponse = false;
    /**
     * fieldErrorRate specifies error distance between values
     * possible errors: field too short, too long, wrong value
     *  0 - means no errors
     */
    Integer fieldErrorRate = 0;
    /**
     * reponseErrorRate specifies error distance between values
     * possible errors: field too short, too long, wrong value
     *  0 - means no errors
     */        
    Integer responseErrorRate = 0;

    int[] responseCounters = {0, 0, 0};
    /**
     * simplest creator
     *   only response for request 1 is generated without errors
     */
    public ResponseGenerator(ScoreBoard sc) {
        justFirstResponse = true;  
        scoreBoard = sc;
    }

    /**
     * error free creator, all responses can be generated
     */

    public ResponseGenerator(ScoreBoard sc, Boolean allResponses) {
        justFirstResponse = !allResponses;    
        scoreBoard = sc;
    }

    /**
     * all responses woth given error rates
     */
    public ResponseGenerator(ScoreBoard sc, Integer fieldRate, Integer responseRate) {
        justFirstResponse = false;    
        fieldErrorRate = fieldRate;
        responseErrorRate = responseRate;
        scoreBoard = sc;
    }

    public SimpleEntry<Integer, String> getNext() {
        int reqNumber = justFirstResponse ? 1 : reqGen.nextInt(3)+1;
        return this.getNext(reqNumber);
        
    }
    public SimpleEntry<Integer, String> getNext(int reqNumber) {

        String response = new String();
        int randPositions = 0;

        //System.out.printf("Loop: %d\n", x);
        
        scoreBoard.setActiveResponseNumber(reqNumber);
        //Add customer number if needed
        String field;
        switch(reqNumber) {
            case 1:
                randPositions = 10;
                response = "";
                responseCounters[0]++;
                break;
            case 2:
                randPositions = 8;
                //Generate customer number as first value on response
                field = String.format("%011d", Math.round(fieldGen.nextDouble() * 1e11));
                response = String.format("%s ", scoreBoard.addResponseField(field));
                responseCounters[1]++;
                break;                    
            case 3:
                randPositions = 7;
                //Generate customer number as first value on response
                field = String.format("%011d", Math.round(fieldGen.nextDouble() * 1e11));
                response = String.format("%s ", scoreBoard.addResponseField(field));
                //Generate Reading day as date
                field = String.format("0%02d%02d%02d", fieldGen.nextInt(100), fieldGen.nextInt(12)+1, fieldGen.nextInt(28)+1);
                response = String.format("%s%s ", response, scoreBoard.addResponseField(field)); 
                responseCounters[2]++;
                break;           
        }
        //Add random data fields
        for(int i = 0; i < randPositions; i++) {
           field = String.format("%07d", Math.round(fieldGen.nextDouble() * 1e7));
           response = String.format("%s%s ", response, scoreBoard.addResponseField(field));
        }
        if(reqNumber == 2) {
           String date = new String();
           date = String.format("0%02d%02d%02d", fieldGen.nextInt(100), fieldGen.nextInt(12)+1, fieldGen.nextInt(28)+1);
           response = String.format("%s%s ", response, scoreBoard.addResponseField(date)); 
        }
        //Add response delimiter
        response = String.format("%s\r", response);
        //
        scoreBoard.closeActiveResponse();

        SimpleEntry<Integer, String> lastResponse = new SimpleEntry<>(reqNumber, response);
        responseDb.add(lastResponse);

        return lastResponse;
    }

    public int[] getResponseCounters() {
       return responseCounters;   
    }
}



            
