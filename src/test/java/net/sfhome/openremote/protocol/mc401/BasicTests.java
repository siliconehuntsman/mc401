/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.sfhome.openremote.protocol.mc401;

import com.google.gwt.regexp.shared.RegExp;
//import org.gwtproject.regexp.shared.RegExp;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.*;

import java.lang.Exception;
import java.util.AbstractMap.SimpleEntry;
import java.util.Collections;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.*;

import net.sfhome.openremote.protocol.mc401.*;

import org.openremote.model.asset.agent.ConnectionStatus;
import org.openremote.model.attribute.AttributeRef;
import org.openremote.model.attribute.AttributeState;
import org.openremote.model.value.*;


public class BasicTests {
    @BeforeEach
    void init() {
           
        //It is required to avoid NullPointerException during isolated tests of ResponseRequest class
        System.setProperty("MJX_IsolationTestMode", "true");
    }
    
    static private String[] resp1Fields = {"Energy", "Volume", "Hours", "T1", "T2", "T1-T2", "power", "Flow", "PeakPwrFlw", "Info"};
    static private String[] resp2Fields = {"CustNo2", "TA2", "TL2", "TA3", "TL3", "In-A", "In-B", "ABCCC", "DDEFFGG", "Date"};
    static private String[] resp3Fields = {"CustNo3", "ReadingDay", "EnergyInPeriod", "VolumeInPeriod", "TA2_Period", "TA3_Period", "InAInPeriod", "InBInPeriod", "PeakPwrFlwInPeriod"};
                                                                  
    @Test public void testCheckPort() {
        if(MC401Port.checkSerialExist("/dev/ttyS0")) {
           System.out.println("Serial exists!");   
        } else {
            System.out.println("Serial does not exist!");  
        }
        System.out.println("testMethod passed!");
    }
    
    @Test public void testManualPort() {
        int error = 0;
        String devName = "/dev/ttyS0";
        Boolean dtrUsed = true;
        Boolean dtrValue = false; 
        Boolean rtsUsed = true;
        Boolean rtsValue = true;
        Integer req1Period = 60; 
        Integer req2Period = 60;
        Integer req3Period = 60;
       // Consumer<AttributeState> updateLinkedAttribute;
        ScheduledThreadPoolExecutor executor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1);
        executor.setRemoveOnCancelPolicy(true);
        
        MC401Port port = new MC401Port(
            executor,
            devName, 
            dtrUsed, dtrValue, rtsUsed, rtsValue, 
            req1Period, req2Period, req3Period, 
            (AttributeState state) -> System.out.printf("Attribute update request! AttrRef: %s NewValue: %s\n", state.getAttributeRef().toString(), state.getValue().toString()),
            (ConnectionStatus status) -> System.out.printf("Protocol status update request! Status: %s\n", status.toString())
           );   
        
        System.out.printf("Configured serial port: %s\n", port.getDevName());
        
        boolean connected = false;
        connected = port.manualCheck(); //port.checkConnection();
        assertTrue(connected, "Heatmeter was not detected!");
        if(connected) {
            System.out.println("Heatmeter connected!");
        }
        else {
            System.out.println("Heatmeter did not respond!");
            error++;
        }
        
        if(error>0) {
            System.out.println("testPort FAILED!");    
        } else {
            System.out.println("testPort passed!");
        }
        port.disable();
    }
    
    Consumer<String> process = new Consumer<String>() {
        public void accept(String value) {		
            System.out.println("Consumer message: " + value);
        }
    };
    
    @Test public void testInitConnection() {
        int error = 0;
        String devName = "/dev/ttyS0";
        Boolean dtrUsed = true;
        Boolean dtrValue = false; 
        Boolean rtsUsed = true;
        Boolean rtsValue = true;
        Integer req1Period = 60; 
        Integer req2Period = 60;
        Integer req3Period = 60;
       // Consumer<AttributeState> updateLinkedAttribute;
        ScheduledThreadPoolExecutor executor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1);
        executor.setRemoveOnCancelPolicy(true);
        
        MC401Port port = new MC401Port(
            executor,
            devName, 
            dtrUsed, dtrValue, rtsUsed, rtsValue, 
            req1Period, req2Period, req3Period, 
            (AttributeState state) -> System.out.printf("Attribute update request! AttrRef: %s NewValue: %s\n", state.getAttributeRef().toString(), state.getValue().toString()),
            (ConnectionStatus status) -> System.out.printf("Protocol status update request! Status: %s\n", status.toString())
        );   
        
        System.out.printf("Configured serial port: %s\n", port.getDevName());
        
        boolean connected = false;
        connected = port.initConnection();
        assertTrue(connected, "Heatmeter was not detected!");
        port.disable();
        if(connected) {
            System.out.println("Heatmeter connected!");
        }
        else {
            System.out.println("Heatmeter did not respond!");
            error++;
        }
        
        if(error>0) {
            System.out.println("testPort FAILED!");    
        } else {
            System.out.println("testPort passed!");
        }
    }
   
}

            
