/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.sfhome.openremote.protocol.mc401;

import net.sfhome.openremote.protocol.mc401.TestUtils.*;
//import net.sfhome.openremote.protocol.mc401.ResponseRequestTests.UpdateMonitor;
//import net.sfhome.openremote.protocol.mc401.ResponseRequestTests.ScoreBoard;
//import net.sfhome.openremote.protocol.mc401.ResponseRequestTests.ResponseGenerator;

import com.google.gwt.regexp.shared.RegExp;
//import org.gwtproject.regexp.shared.RegExp;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.*;


import java.lang.Exception;
import java.util.AbstractMap.SimpleEntry;
import java.util.Collections;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.*;
import java.util.stream.*;
import java.util.stream.Collectors.*;


//import org.junit.Test;
//port org.junit.BeforeEach;

//import static org.junit.Assert.*;


import net.sfhome.openremote.protocol.mc401.*;

import org.openremote.model.asset.agent.ConnectionStatus;
import org.openremote.model.attribute.AttributeRef;
import org.openremote.model.attribute.AttributeState;
import org.openremote.model.attribute.MetaItem;
import org.openremote.model.attribute.MetaItemDescriptor;
import org.openremote.model.value.*;

import static org.openremote.model.Constants.PROTOCOL_NAMESPACE;
import static org.openremote.model.attribute.MetaItemDescriptor.Access.ACCESS_PRIVATE;
import static org.openremote.model.attribute.MetaItemDescriptorImpl.*;
import static org.openremote.model.util.TextUtil.REGEXP_PATTERN_STRING_NON_EMPTY;

public class PortTests {
    private MC401Port port;

    
    @AfterEach
    public void closePort() {
        port.disable();
        
    }

    // ***************************************************************************************************************
    //   TESTS
    // ***************************************************************************************************************
    /*
    @Test public void testSomeLibraryMethod() {
        MC401Protocol classUnderTest = new MC401Protocol();
        System.out.printf("Protocol name: %s", classUnderTest.getProtocolName());
        assertEquals("MC401Client", classUnderTest.getProtocolName());
    }
    */
    final private AtomicInteger counter = new AtomicInteger(0);
    private synchronized void consumeResponse(String response) {
        System.out.println("Response update request! - " + response);
        counter.incrementAndGet();
        
    }
    
    
    @Test public void testQueueMessage() {
        
        String devName = "/dev/ttyS0";
        Boolean dtrUsed = true;
        Boolean dtrValue = false; 
        Boolean rtsUsed = true;
        Boolean rtsValue = true;
        Integer req1Period = 1; 
        Integer req2Period = 5;
        Integer req3Period = 8;
       // Consumer<AttributeState> updateLinkedAttribute;
        UpdateMonitor monitor = new UpdateMonitor(20);
        ScheduledThreadPoolExecutor executor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1);
        executor.setRemoveOnCancelPolicy(true);
        
        port = new MC401Port(
            executor,
            devName, 
            dtrUsed, dtrValue, rtsUsed, rtsValue, 
            req1Period, req2Period, req3Period, 
            (AttributeState state) -> System.out.printf("Attribute update request! AttrRef: %s NewValue: %s\n", state.getAttributeRef().toString(), state.getValue().toString()),
            (ConnectionStatus status) -> System.out.printf("Protocol status update request! Status: %s\n", status.toString())
        );   
        
        System.out.printf("Configured serial port: %s\n", port.getDevName());
        
        AbstractResponseRequest processorReq1 = new ResponseRequest(1, req1Period, monitor);
        Integer reqNumber = new Integer(1);
        byte[] request = {'/','#','1'};
        System.out.println(String.format("request: %c,%c,%c", request[0], request[1], request[2]));
        
        QueueMessage message = new QueueMessage(request, processorReq1.getResponseLength(), processorReq1);
        boolean status = false;
        status = port.debugCheckMessage(message);
        assertTrue(status, "Heatmeter was not detected!");
        port.disable();
        
    }
    
    @Test public void testSimpleInjection() throws InterruptedException {
        int error = 0;
        String devName = "/dev/ttyS0";
        Boolean dtrUsed = true;
        Boolean dtrValue = false; 
        Boolean rtsUsed = true;
        Boolean rtsValue = true;
        Integer req1Period = 1; 
        Integer req2Period = 5;
        Integer req3Period = 8;
       // Consumer<AttributeState> updateLinkedAttribute;
        ScheduledThreadPoolExecutor executor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1);
        executor.setRemoveOnCancelPolicy(true);
        
        System.setProperty("net.sfhome.openremote.protocol.mc401.TestUtils.disableQueueClearing", "true");
        
        port = new MC401Port(
            executor,
            devName, 
            dtrUsed, dtrValue, rtsUsed, rtsValue, 
            req1Period, req2Period, req3Period, 
            (AttributeState state) -> System.out.printf("Attribute update request! AttrRef: %s NewValue: %s\n", state.getAttributeRef().toString(), state.getValue().toString()),
            (ConnectionStatus status) -> System.out.printf("Protocol status update request! Status: %s\n", status.toString())
        );   
        
        System.out.printf("Configured serial port: %s\n", port.getDevName());
        System.out.println("Enabling MC401 Port");
        
        counter.set(0);
        boolean connected = port.initConnection();
        assertTrue(connected, "Serial port cannot be open!");
        
        System.out.printf("MC401: Status: %s\n", connected ? "CONN" : "DISCON");
        //Inject into the queue a single message with request number 1
        connected = port.debugSimpleInjection((String response) -> consumeResponse(response));
        assertTrue(connected, "Posting queue message failed");
        //CHYBA SĄ PROBLEMY Z WATKAMI SIEGAJACYMI TYCH SAMYCH DANYCH
        int count = 0;
        for(int i=0; i<15;i++) {
            count = port.debugGetQueueSize();
            System.out.println(String.format("Loop (500ms): %d - execQueue size: %d, responseQueue size: %d", i, count, port.debugGetDigestQueueSize()));
            if(count > 0)
                port.enable();
            Thread.sleep(500);            
        }
        
        port.disable();
        
        
        Integer[][] statCounters = port.getStatCounters();
        System.out.println("Transmission statistics:");
        for(int i =0; i<3; i++) {
           System.out.println(String.format("Request %d> Tx: %d, Rx: %d, Retries: %d", i, statCounters[0][i], statCounters[1][i], statCounters[2][i]));
            
        }
        //System.out.println(monitor.getSummary(statCounters[1][0], statCounters[1][1], statCounters[1][2]));
        
        assertTrue(port.getRxCounter() != 0, "Response not received!");       
        
        
    }    
    
    @Test public void testPortSingle() throws InterruptedException {
        int error = 0;
        String devName = "/dev/ttyS0";
        Boolean dtrUsed = true;
        Boolean dtrValue = false; 
        Boolean rtsUsed = true;
        Boolean rtsValue = true;
        Integer req1Period = 5; 
        Integer req2Period = 5;
        Integer req3Period = 8;
       // Consumer<AttributeState> updateLinkedAttribute;
        ScheduledThreadPoolExecutor executor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1);
        executor.setRemoveOnCancelPolicy(true);
        
        UpdateMonitor monitor = new UpdateMonitor(10, 1);
        port = new MC401Port(
            executor,
            devName, 
            dtrUsed, dtrValue, rtsUsed, rtsValue, 
            req1Period, req2Period, req3Period, 
            monitor,
            (ConnectionStatus status) -> System.out.printf("Protocol status update request! Status: %s\n", status.toString())
          );   
        
        
        System.out.printf("Configured serial port: %s\n", port.getDevName());
        System.out.println("Enabling MC401 Port");
        
        counter.set(0);
        boolean connected = port.initConnection();
        assertTrue(connected, "Serial port cannot be open!");
        
        //port.enable();
        
        monitor.attributesAsStream()
            .forEach(entry -> {
                System.out.println(String.format("Linking attribute: %s, field name: %s", ((AttributeRef) entry.get("attrRef")).toString(), (String) entry.get("fieldName")) );
                port.linkAttribute((AttributeRef) entry.get("attrRef"), (String) entry.get("fieldName"));
                });       
        
        
        //CHYBA SĄ PROBLEMY Z WATKAMI SIEGAJACYMI TYCH SAMYCH DANYCH
        int count = 0;
        for(int i=0; i<30;i++) {
            count = port.debugGetQueueSize();
            System.out.println(String.format("Loop (500ms): %d - execQueue size: %d, responseQueue size: %d", i, count, port.debugGetDigestQueueSize()));
            if(count > 0)
                port.enable();
            Thread.sleep(500);            
        }

        
        monitor.attributesAsStream()
            .forEach(entry -> {
                System.out.println(String.format("unLinking attribute: %s, field name: %s", ((AttributeRef) entry.get("attrRef")).toString(), (String) entry.get("fieldName")) );
                port.unLinkAttribute((AttributeRef) entry.get("attrRef"), (String) entry.get("fieldName"));
                });  
        
        port.disable();
       // Thread.sleep(5);
        
        Integer[][] statCounters = port.getStatCounters();
        System.out.println("Transmission statistics:");
        for(int i =0; i<3; i++) {
           System.out.println(String.format("Request %d> Tx: %d, Rx: %d, Retries: %d", i, statCounters[0][i], statCounters[1][i], statCounters[2][i]));
            
        }
        System.out.println(monitor.getSummary(statCounters[1][0], statCounters[1][1], statCounters[1][2]));
        monitor.getCoverage();
        
        assertTrue(port.getRxCounter() != 0, "Response not received!");
        
        
        
        
    }    
    
    @Test public void testPort() throws InterruptedException {
        int error = 0;
        String devName = "/dev/ttyS0";
        Boolean dtrUsed = true;
        Boolean dtrValue = false; 
        Boolean rtsUsed = true;
        Boolean rtsValue = true;
        Integer req1Period = 15; 
        Integer req2Period = 15;
        Integer req3Period = 15;
       // Consumer<AttributeState> updateLinkedAttribute;
        ScheduledThreadPoolExecutor executor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1);
        executor.setRemoveOnCancelPolicy(true);
        
        UpdateMonitor monitor = new UpdateMonitor(20);
        port = new MC401Port(
            executor,
            devName, 
            dtrUsed, dtrValue, rtsUsed, rtsValue, 
            req1Period, req2Period, req3Period, 
            monitor,
            (ConnectionStatus status) -> System.out.printf("Protocol status update request! Status: %s\n", status.toString())
        );   
        
        
        System.out.printf("Configured serial port: %s\n", port.getDevName());
        System.out.println("Connecting MC401 Port");
        
        counter.set(0);
        boolean connected = port.initConnection();
        assertTrue(connected, "Serial port cannot be open!");
        port.enable();
        
        monitor.attributesAsStream()
            .forEach(entry -> {
                System.out.println(String.format("Linking attribute: %s, field name: %s", ((AttributeRef) entry.get("attrRef")).toString(), (String) entry.get("fieldName")) );
                port.linkAttribute((AttributeRef) entry.get("attrRef"), (String) entry.get("fieldName"));
                });       
        
        for(int i=0; i<100;i++) {
            
            System.out.println(String.format("Loop (500ms): %d - execQueue size: %d, responseQueue size: %d", 
                                             i, port.debugGetQueueSize(), port.debugGetDigestQueueSize()));
               
            Thread.sleep(500);            
        }

        port.terminateRequestTriggers();
        while(port.debugGetQueueSize() > 0) {
            System.out.println(String.format("Finalizing - execQueue size: %d, responseQueue size: %d", 
                                             port.debugGetQueueSize(), port.debugGetDigestQueueSize()));
            Thread.sleep(1000);
        }
        
        
        monitor.attributesAsStream()
            .forEach(entry -> {
                System.out.println(String.format("unLinking attribute: %s, field name: %s", ((AttributeRef) entry.get("attrRef")).toString(), (String) entry.get("fieldName")) );
                port.unLinkAttribute((AttributeRef) entry.get("attrRef"), (String) entry.get("fieldName"));
                });  
        
        port.disable();
       // Thread.sleep(5);
        if(port.getRxCounter() == 0) {
            System.out.println("No single response received!");
        } else {
            System.out.println(String.format("There were %d responses received", port.getRxCounter()));
        }
        
        Integer[][] statCounters = port.getStatCounters();
        System.out.println("Transmission statistics:");
        for(int i =0; i<3; i++) {
           System.out.println(String.format("Request %d> Tx: %d, Rx: %d, Retries: %d", i+1, statCounters[0][i], statCounters[1][i], statCounters[2][i]));
            
        }
        System.out.println(monitor.getSummary(statCounters[1][0], statCounters[1][1], statCounters[1][2]));
        monitor.getCoverage();
        
        assertTrue(port.getRxCounter() != 0, "Response not received!");
        
    }   
    
    
    
    @Test public void testDebugPort() throws InterruptedException{
        int error = 0;
        String devName = "/dev/ttyS0";
        Boolean dtrUsed = true;
        Boolean dtrValue = false; 
        Boolean rtsUsed = true;
        Boolean rtsValue = true;
        Integer req1Period = 1; 
        Integer req2Period = 5;
        Integer req3Period = 8;
       // Consumer<AttributeState> updateLinkedAttribute;
        ScheduledThreadPoolExecutor executor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1);
        
        UpdateMonitor monitor = new UpdateMonitor(20);
        port = new MC401Port(
            executor,  
            devName, 
            dtrUsed, dtrValue, rtsUsed, rtsValue, 
            req1Period, req2Period, req3Period, 
            (AttributeState state) -> System.out.printf("Attribute update request! AttrRef: %s NewValue: %s\n", state.getAttributeRef().toString(), state.getValue().toString()),
            (ConnectionStatus status) -> System.out.printf("Protocol status update request! Status: %s\n", status.toString())
        );   
        
        System.out.printf("Configured serial port: %s\n", port.getDevName());
        
        boolean connected = false;
//        connected = port.debugCheck(process); //port.checkConnection();
//        assertTrue(connected, "Heatmeter was not detected!");
        System.out.println("Heatmeter connected!");
        port.disable();
    }    
    
    @Test public void testGetTemplate() throws InterruptedException{
        int error = 0;
        String devName = "/dev/ttyS0";
        Boolean dtrUsed = true;
        Boolean dtrValue = false; 
        Boolean rtsUsed = true;
        Boolean rtsValue = true;
        Integer req1Period = 1; 
        Integer req2Period = 5;
        Integer req3Period = 8;
       // Consumer<AttributeState> updateLinkedAttribute;
        ScheduledThreadPoolExecutor executor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1);
        
        UpdateMonitor monitor = new UpdateMonitor(20);
        port = new MC401Port(
            executor,  
            devName, 
            dtrUsed, dtrValue, rtsUsed, rtsValue, 
            req1Period, req2Period, req3Period, 
            (AttributeState state) -> System.out.printf("Attribute update request! AttrRef: %s NewValue: %s\n", state.getAttributeRef().toString(), state.getValue().toString()),
            (ConnectionStatus status) -> System.out.printf("Protocol status update request! Status: %s\n", status.toString())
        );   
        
        final String PROTOCOL_NAME = PROTOCOL_NAMESPACE + ":MC401Protocol";
        final MetaItemDescriptor META_ATTRIBUTE_FIELD_NAME = metaItemString(
            PROTOCOL_NAME + ":fieldName",
            ACCESS_PRIVATE,
            true,
            REGEXP_PATTERN_STRING_NON_EMPTY,
            MetaItemDescriptor.PatternFailure.STRING_EMPTY);
        
        System.out.printf("Template: %s\n", port.getAssetAttributeTemplate(1, META_ATTRIBUTE_FIELD_NAME));
        

    }    
    
    
}

            
