/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.4/userguide/java_library_plugin.html
 */

apply plugin: "java"
apply plugin: "groovy"
apply plugin: "java-library"
apply plugin: "maven"
apply plugin: "gwt"



sourceSets {
  main {
    java {
      srcDir "src/main"
      exclude "backup/**"
    }
  }

}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.wisepersist:gwt-gradle-plugin:1.0.10'
    }
}

gwt {
    gwtVersion='2.8.1'
    modules 'com.google.gwt.regexp.shared.RegExp'
}

task copyJar(type: Copy) {
    from jar.outputs
    into "${project(':deployment').projectDir}/extensions"
}

// Automatically copy this extension into the deployment/manager/extensions/ directory
task installDist(type: Copy) {
    dependsOn copyJar
    from jar.outputs
    into "${project(':deployment').projectDir}/manager/extensions"
}

task myJavadocs(type: Javadoc) {
  source = sourceSets.main.java

}


clean {
    delete = "${project(':deployment').projectDir}/manager/extensions/${jar.archiveName}"
    
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

task testDep {
    println "${project(':openremote:manager').buildDir}/libs"
    }
    
dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

  
    // Use JUnit test framework
    //testImplementation 'junit:junit:4.12'
	  testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
  
    //compile fileTree('manager') { include '*.jar' }
    //compile fileTree('model') { include '*.jar' }
    //compile fileTree('agent') { include '*.jar' }
    
    //compile files("${project(':openremote:model').buildDir}/classes")
    
    //compile project(':openremote:manager')
        
	//compile project(':openremote:agent'), project(':openremote:model')
	
	//compile project(':agent')
	
	//implementation files(project(":openremote:model").buildDir.getPath().concat("/libs"))
	
	//Dirty trickt to link corresponding compiled projects
	implementation files('../openremote/model/build/libs/openremote-model-3.0-SNAPSHOT.jar',
	                     '../openremote/container/build/libs/openremote-container-3.0-SNAPSHOT.jar',
                         '../openremote/agent/build/libs/openremote-agent-3.0-SNAPSHOT.jar')
	
	//implementation files('./import/libs/openremote-agent-3.0-SNAPSHOT.jar',
	//					           './import/libs/openremote-container-3.0-SNAPSHOT.jar',
	//					           './import/libs/openremote-model-3.0-SNAPSHOT.jar')
						           
    compile 'com.fazecast:jSerialComm:[2.0.0,3.0.0)'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.11.0'

    compile group: 'javax.persistence', name: 'persistence-api', version: '1.0'
    
    // https://mvnrepository.com/artifact/org.openjfx/javafx
    compile group: 'org.openjfx', name: 'javafx', version: '11', ext: 'pom'

    // https://mvnrepository.com/artifact/org.openjfx/javafx-controls
    //compile group: 'org.openjfx', name: 'javafx-controls', version: '14.0.2.1'

    // https://mvnrepository.com/artifact/org.openjfx/javafx-base
    compile group: 'org.openjfx', name: 'javafx-base', version: '14.0.2.1'
  
    implementation("org.gwtproject.regexp:gwt-regexp:HEAD-SNAPSHOT")

}

test {
  ///useJUnit()
  useJUnitPlatform()
  //classpath = classpath + ${buildDir}/classes/java/main
      //sourceSets.main.classes + sourceSets.main.classes
  
  testLogging {
		events "passed", "skipped", "failed"
	}
  println "Classpath 2: "
  classpath.each {
    println "path: $it"
  }
  test.outputs.upToDateWhen {false}
  

 // systemProperty 'MJX_IsolationTestMode', 'true' 
  
}


jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }

}

